plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

repositories {
//    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }

}

android {
    namespace 'com.example.digitalwhiteboard'
    configurations {
        extractForNativeBuild
    }
    compileSdkVersion 33
    buildToolsVersion "34.0.0-rc3"

    defaultConfig {
        applicationId "com.example.digitalwhiteboard"
        minSdkVersion 28
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        ndk {
            abiFilters 'arm64-v8a', 'x86', 'x86_64'
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared" ,
                    "-DANDROID_ARM_NEON=ON",
                    "-DANDROID_TOOLCHAIN=clang",
                    "-DANDROID_CPP_FEATURES=rtti exceptions",
                    "-DCMAKE_BUILD_TYPE=Release",
                    "-Wl,-gc_sections,--strip-debug,-shared"
                cFlags "-fstack-protector-all -fvisibility=hidden -ffunction-sections -fdata-sections -shared -Wno-error=format-security -O3"
                cppFlags "-std=c++17 -fstack-protector-all -fvisibility=hidden -ffunction-sections -frtti -fexceptions -O3"
                version '3.22.1'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    externalNativeBuild {
        cmake {
            path "./CMakeLists.txt"
            version '3.22.1'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
    ndkVersion '25.2.9519653'
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.10.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.preference:preference:1.2.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    //CameraX
    def camerax_version = "1.3.0-alpha06"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"

    //PyTorch
    implementation files("libs/pytorch_android-release.aar")
    implementation files("libs/pytorch_android_torchvision-release.aar")
    extractForNativeBuild files("libs/pytorch_android-release.aar")

}

task extractAARForNativeBuild {
    doLast {
        configurations.extractForNativeBuild.files.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "$buildDir/$file.name"
                include "headers/**"
                include "jni/**"
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('externalNativeBuild')) {
        task.dependsOn(extractAARForNativeBuild)
    }
}